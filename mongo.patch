Index: src/main/java/com/handson/tinyurl/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/handson/tinyurl/model/User.java b/src/main/java/com/handson/tinyurl/model/User.java
new file mode 100644
--- /dev/null	(date 1644132200382)
+++ b/src/main/java/com/handson/tinyurl/model/User.java	(date 1644132200382)
@@ -0,0 +1,116 @@
+package com.handson.tinyurl.model;
+
+
+import org.springframework.data.annotation.Id;
+import org.springframework.data.mongodb.core.index.Indexed;
+import org.springframework.data.mongodb.core.mapping.Document;
+
+import java.util.Map;
+import java.util.Objects;
+
+@Document(collection = "users")
+public class User {
+
+    @Id
+    private String id;
+
+    @Indexed(unique = true)
+    private String name;
+
+    private int allUrlClicks;
+    private Map<String, ShortUrl> shorts;
+
+    public Map<String, ShortUrl> getShorts() {
+        return shorts;
+    }
+
+    @Override
+    public String toString() {
+        return "User{" +
+                "id='" + id + '\'' +
+                ", name='" + name + '\'' +
+                ", allUrlClicks=" + allUrlClicks +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        User user = (User) o;
+        return allUrlClicks == user.allUrlClicks && Objects.equals(id, user.id) && Objects.equals(name, user.name);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(id, name, allUrlClicks);
+    }
+
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public void setAllUrlClicks(int allUrlClicks) {
+        this.allUrlClicks = allUrlClicks;
+    }
+
+
+    public String getId() {
+        return id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public int getAllUrlClicks() {
+        return allUrlClicks;
+    }
+
+    public static final class UserBuilder {
+        private String id;
+        private String name;
+        private int allUrlClicks;
+        private Map<String, ShortUrl> shorts;
+
+        private UserBuilder() {
+        }
+
+        public static UserBuilder anUser() {
+            return new UserBuilder();
+        }
+
+        public UserBuilder withId(String id) {
+            this.id = id;
+            return this;
+        }
+
+        public UserBuilder withName(String name) {
+            this.name = name;
+            return this;
+        }
+
+        public UserBuilder withAllUrlClicks(int allUrlClicks) {
+            this.allUrlClicks = allUrlClicks;
+            return this;
+        }
+
+        public UserBuilder withShorts(Map<String, ShortUrl> shorts) {
+            this.shorts = shorts;
+            return this;
+        }
+
+        public User build() {
+            User user = new User();
+            user.setId(id);
+            user.setName(name);
+            user.setAllUrlClicks(allUrlClicks);
+            user.shorts = this.shorts;
+            return user;
+        }
+    }
+}
Index: src/main/java/com/handson/tinyurl/config/MongoConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/handson/tinyurl/config/MongoConfig.java b/src/main/java/com/handson/tinyurl/config/MongoConfig.java
new file mode 100644
--- /dev/null	(date 1644132200380)
+++ b/src/main/java/com/handson/tinyurl/config/MongoConfig.java	(date 1644132200380)
@@ -0,0 +1,19 @@
+package com.handson.tinyurl.config;
+
+import org.springframework.context.annotation.Configuration;
+import org.springframework.data.mongodb.config.AbstractMongoClientConfiguration;
+
+@Configuration
+public class MongoConfig extends AbstractMongoClientConfiguration {
+
+    @Override
+    protected String getDatabaseName() {
+        return "tinydb";
+    }
+
+    @Override
+    public boolean autoIndexCreation() {
+        return true;
+    }
+
+}
Index: src/main/java/com/handson/tinyurl/model/ShortUrl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/handson/tinyurl/model/ShortUrl.java b/src/main/java/com/handson/tinyurl/model/ShortUrl.java
new file mode 100644
--- /dev/null	(date 1644132200381)
+++ b/src/main/java/com/handson/tinyurl/model/ShortUrl.java	(date 1644132200381)
@@ -0,0 +1,38 @@
+package com.handson.tinyurl.model;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Objects;
+
+public class ShortUrl {
+    private Map<String, Integer> clicks = new HashMap<>();
+
+    public Map<String, Integer> getClicks() {
+        return clicks;
+    }
+
+    public void setClicks(Map<String, Integer> clicks) {
+        this.clicks = clicks;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        ShortUrl shortUrl = (ShortUrl) o;
+        return Objects.equals(clicks, shortUrl.clicks);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(clicks);
+    }
+
+    @Override
+    public String toString() {
+        return "ShortUrl{" +
+                "clicks=" + clicks +
+                '}';
+    }
+
+}
Index: src/main/java/com/handson/tinyurl/util/Dates.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/handson/tinyurl/util/Dates.java b/src/main/java/com/handson/tinyurl/util/Dates.java
new file mode 100644
--- /dev/null	(date 1644132384693)
+++ b/src/main/java/com/handson/tinyurl/util/Dates.java	(date 1644132384693)
@@ -0,0 +1,88 @@
+package com.handson.tinyurl.util;
+
+import org.joda.time.*;
+import org.springframework.lang.Nullable;
+
+import java.text.SimpleDateFormat;
+import java.time.OffsetDateTime;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.Objects;
+import java.util.TimeZone;
+
+public class Dates {
+    public static SimpleDateFormat shortDate = new SimpleDateFormat("YYYY-MM-dd");
+    public static TimeZone TIME_ZONE = TimeZone.getTimeZone("Asia/Jerusalem");
+    public static SimpleDateFormat monthFormatter = new SimpleDateFormat("yyyy/MM");
+
+    public Dates() {
+    }
+
+    public static String getCurMonth() {
+        Date date = new Date();
+
+        return monthFormatter.format(date);
+    }
+
+    public static String dateToStr(@Nullable LocalDate date) {
+        return date == null ? null : shortDate.format(date);
+    }
+
+    public static Date atUtc(LocalDateTime date) {
+        return atUtc(date, TIME_ZONE);
+    }
+
+    public static Date atUtc(LocalDateTime date, TimeZone zone) {
+        if (date == null) return null;
+        Calendar calendar = Calendar.getInstance();
+        calendar.setFirstDayOfWeek(Calendar.SUNDAY);
+        calendar.setTimeZone(zone);
+        calendar.set(date.getYear(), date.getMonthOfYear()-1, date.getDayOfMonth());//convert from locatDateTime to Calender time
+        calendar.set(Calendar.HOUR_OF_DAY, date.getHourOfDay());
+        calendar.set(Calendar.MINUTE, date.getMinuteOfHour());
+        calendar.set(Calendar.SECOND, date.getSecondOfMinute());
+        calendar.set(Calendar.MILLISECOND, 0);
+        return calendar.getTime();
+    }
+
+    public static Date atUtc(@Nullable LocalDate date) {
+        return atUtc(date, TIME_ZONE);
+    }
+
+    public static Date atUtc(@Nullable LocalDate date, TimeZone zone) {
+        return date == null ? null : atUtc(date.toLocalDateTime(LocalTime.MIDNIGHT), zone);
+    }
+
+    public static LocalDateTime atLocalTime(Date date) {
+        return atLocalTime(date, TIME_ZONE);
+    }
+
+    public static LocalDateTime atLocalTime(Date date, TimeZone zone) {
+        if (date == null) return null;
+        var localDate = OffsetDateTime.ofInstant(date.toInstant(), zone.toZoneId()).toLocalDateTime();
+        Calendar c = Calendar.getInstance();
+        c.set(localDate.getYear(), localDate.getMonthValue() - 1, localDate.getDayOfMonth());
+        c.set(Calendar.HOUR_OF_DAY, localDate.getHour());
+        c.set(Calendar.MINUTE, localDate.getMinute());
+        c.set(Calendar.SECOND, localDate.getSecond());
+        c.set(Calendar.MILLISECOND, 0);
+        LocalDateTime res = LocalDateTime.fromCalendarFields(c);
+        return res;
+    }
+
+    public static Date nowUTC() {
+        return DateTime.now().withZone(DateTimeZone.UTC).toDate();
+    }
+
+    public static String getFullDateTime() {
+        return DateTime.now().withZone(DateTimeZone.UTC).toDateTimeISO().toString();
+    }
+
+    public static boolean equals(@Nullable Date date1, @Nullable Date date2) {
+        if (date1 != null && date2 != null) {
+            return date1.getTime() == date2.getTime();
+        } else {
+            return Objects.equals(date1, date2);
+        }
+    }
+}
Index: src/main/java/com/handson/tinyurl/repository/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/handson/tinyurl/repository/UserRepository.java b/src/main/java/com/handson/tinyurl/repository/UserRepository.java
new file mode 100644
--- /dev/null	(date 1644132200382)
+++ b/src/main/java/com/handson/tinyurl/repository/UserRepository.java	(date 1644132200382)
@@ -0,0 +1,12 @@
+package com.handson.tinyurl.repository;
+
+import com.handson.tinyurl.model.User;
+import org.springframework.data.mongodb.repository.MongoRepository;
+
+import java.util.List;
+
+public interface UserRepository extends MongoRepository<User, String> {
+    User findFirstByName(String name);
+
+}
+
